import Phaser from 'phaser';

export default class MenuScene extends Phaser.Scene {
  constructor() {
    super({ key: 'MenuScene' });
  }

  create() {
    console.log('📱 MenuScene: Creating main menu...');
    
    const { width, height } = this.sys.game.config;
    
    // Track menu scene start
    if (window.trackGameEvent) {
      window.trackGameEvent('menu_scene_start');
    }

    // Add background
    this.add.image(width / 2, height / 2, 'background-placeholder').setOrigin(0.5);
    
    // Add title
    const title = this.add.text(width / 2, height / 4, 'AGENT STUDIO', {
      fontSize: '48px',
      fontFamily: 'Arial, sans-serif',
      color: '#ffffff',
      stroke: '#000000',
      strokeThickness: 4,
      align: 'center'
    }).setOrigin(0.5);

    // Add subtitle
    const subtitle = this.add.text(width / 2, height / 4 + 60, 'AI-Generated Game Experience', {
      fontSize: '18px',
      fontFamily: 'Arial, sans-serif',
      color: '#ecf0f1',
      align: 'center'
    }).setOrigin(0.5);

    // Create menu buttons
    this.createMenuButtons();
    
    // Add animated elements
    this.createAnimations();
    
    // Add version info
    this.add.text(20, height - 30, 'v1.0.0 | Generated by AI Agents', {
      fontSize: '12px',
      fontFamily: 'Arial, sans-serif',
      color: '#7f8c8d'
    });

    // Add instructions
    this.add.text(width / 2, height - 60, 'Generated content will appear as agents complete their tasks', {
      fontSize: '14px',
      fontFamily: 'Arial, sans-serif',
      color: '#95a5a6',
      align: 'center'
    }).setOrigin(0.5);
  }

  createMenuButtons() {
    const { width, height } = this.sys.game.config;
    const buttonY = height / 2 + 50;
    const buttonSpacing = 80;
    
    // Start Game button
    const startButton = this.createButton(
      width / 2, 
      buttonY, 
      'START GAME', 
      () => this.startGame()
    );
    
    // Options button (placeholder)
    const optionsButton = this.createButton(
      width / 2, 
      buttonY + buttonSpacing, 
      'OPTIONS', 
      () => this.showOptions()
    );
    
    // Credits button
    const creditsButton = this.createButton(
      width / 2, 
      buttonY + buttonSpacing * 2, 
      'CREDITS', 
      () => this.showCredits()
    );

    // Store button references
    this.menuButtons = [startButton, optionsButton, creditsButton];
  }

  createButton(x, y, text, callback) {
    // Button background
    const buttonBg = this.add.rectangle(x, y, 200, 50, 0x3498db, 0.8)
      .setInteractive()
      .setStrokeStyle(2, 0x2980b9);
    
    // Button text
    const buttonText = this.add.text(x, y, text, {
      fontSize: '16px',
      fontFamily: 'Arial, sans-serif',
      color: '#ffffff',
      align: 'center'
    }).setOrigin(0.5);

    // Button container
    const button = this.add.container(0, 0, [buttonBg, buttonText]);
    
    // Add hover effects
    buttonBg.on('pointerover', () => {
      buttonBg.setFillStyle(0x2980b9);
      buttonText.setScale(1.05);
      this.game.canvas.style.cursor = 'pointer';
    });
    
    buttonBg.on('pointerout', () => {
      buttonBg.setFillStyle(0x3498db);
      buttonText.setScale(1);
      this.game.canvas.style.cursor = 'default';
    });
    
    buttonBg.on('pointerdown', () => {
      buttonBg.setFillStyle(0x1f5f99);
      buttonText.setScale(0.95);
    });
    
    buttonBg.on('pointerup', () => {
      buttonBg.setFillStyle(0x2980b9);
      buttonText.setScale(1.05);
      
      // Track button click
      if (window.trackGameEvent) {
        window.trackGameEvent('menu_button_click', { button: text });
      }
      
      // Execute callback
      callback();
    });
    
    return button;
  }

  createAnimations() {
    // Floating animation for title
    this.tweens.add({
      targets: this.children.list.find(child => 
        child.type === 'Text' && child.text === 'AGENT STUDIO'
      ),
      y: '+=10',
      duration: 2000,
      ease: 'Sine.easeInOut',
      yoyo: true,
      repeat: -1
    });

    // Pulse animation for buttons
    this.menuButtons.forEach((button, index) => {
      this.time.delayedCall(index * 200, () => {
        this.tweens.add({
          targets: button,
          scaleX: 1.02,
          scaleY: 1.02,
          duration: 1500,
          ease: 'Sine.easeInOut',
          yoyo: true,
          repeat: -1
        });
      });
    });
  }

  startGame() {
    console.log('🎮 Starting game...');
    
    // Track game start
    if (window.trackGameEvent) {
      window.trackGameEvent('game_start');
    }

    // Fade out and transition
    this.cameras.main.fadeOut(500, 0, 0, 0);
    
    this.cameras.main.once('camerafadeoutcomplete', () => {
      this.scene.start('GameScene');
    });
  }

  showOptions() {
    console.log('⚙️ Options menu (placeholder)');
    
    // Create a simple options overlay
    const { width, height } = this.sys.game.config;
    
    // Dark overlay
    const overlay = this.add.rectangle(0, 0, width, height, 0x000000, 0.7)
      .setOrigin(0)
      .setInteractive();
    
    // Options panel
    const panel = this.add.rectangle(width / 2, height / 2, 400, 300, 0x2c3e50, 0.9)
      .setStrokeStyle(2, 0x34495e);
    
    // Options title
    const title = this.add.text(width / 2, height / 2 - 100, 'OPTIONS', {
      fontSize: '24px',
      fontFamily: 'Arial, sans-serif',
      color: '#ffffff',
      align: 'center'
    }).setOrigin(0.5);
    
    // Options content
    const content = this.add.text(width / 2, height / 2, 'Game options will be\nconfigured by UI/UX Agent', {
      fontSize: '16px',
      fontFamily: 'Arial, sans-serif',
      color: '#ecf0f1',
      align: 'center'
    }).setOrigin(0.5);
    
    // Close button
    const closeButton = this.add.text(width / 2, height / 2 + 80, 'CLOSE', {
      fontSize: '16px',
      fontFamily: 'Arial, sans-serif',
      color: '#3498db',
      align: 'center'
    }).setOrigin(0.5).setInteractive();
    
    closeButton.on('pointerup', () => {
      overlay.destroy();
      panel.destroy();
      title.destroy();
      content.destroy();
      closeButton.destroy();
    });
    
    // Track options view
    if (window.trackGameEvent) {
      window.trackGameEvent('options_viewed');
    }
  }

  showCredits() {
    console.log('👥 Credits screen');
    
    // Create credits overlay similar to options
    const { width, height } = this.sys.game.config;
    
    const overlay = this.add.rectangle(0, 0, width, height, 0x000000, 0.7)
      .setOrigin(0)
      .setInteractive();
    
    const panel = this.add.rectangle(width / 2, height / 2, 500, 400, 0x2c3e50, 0.9)
      .setStrokeStyle(2, 0x34495e);
    
    const title = this.add.text(width / 2, height / 2 - 150, 'CREDITS', {
      fontSize: '24px',
      fontFamily: 'Arial, sans-serif',
      color: '#ffffff',
      align: 'center'
    }).setOrigin(0.5);
    
    const credits = this.add.text(width / 2, height / 2 - 50, `
AGENT STUDIO

Autonomous Development System
Generated by AI Agents

🤖 Director Agent
📝 Coder Agent  
🎨 Designer Agent
🎛️ UI/UX Agent

Powered by:
• Phaser.js Game Engine
• Vite Build Tool
• Docker & Redis
• Stable Diffusion
• Large Language Models
    `, {
      fontSize: '14px',
      fontFamily: 'Arial, sans-serif',
      color: '#ecf0f1',
      align: 'center',
      lineSpacing: 8
    }).setOrigin(0.5);
    
    const closeButton = this.add.text(width / 2, height / 2 + 150, 'CLOSE', {
      fontSize: '16px',
      fontFamily: 'Arial, sans-serif',
      color: '#3498db',
      align: 'center'
    }).setOrigin(0.5).setInteractive();
    
    closeButton.on('pointerup', () => {
      overlay.destroy();
      panel.destroy();
      title.destroy();
      credits.destroy();
      closeButton.destroy();
    });
    
    // Track credits view
    if (window.trackGameEvent) {
      window.trackGameEvent('credits_viewed');
    }
  }
}
